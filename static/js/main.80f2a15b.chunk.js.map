{"version":3,"sources":["todosData.js","TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["todosData","id","text","completed","TodoItems","props","className","type","checked","myItems","App","TodoComp","map","key","Boolean","window","location","hostname","match","Car","changeColor","setState","color","state","this","onClick","React","Component","Model","shiftColor","alert","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NA4BeA,G,YA5BG,CACd,CACIC,GAAI,EACJC,KAAM,qBACNC,WAAW,GAEf,CACIF,GAAI,EACJC,KAAM,mBACNC,WAAW,GAEf,CACIF,GAAI,EACJC,KAAM,mBACNC,WAAW,GAEf,CACIF,GAAI,EACJC,KAAM,WACNC,WAAW,GAEf,CACIF,GAAI,EACJC,KAAM,mCACNC,WAAW,KCZJC,MAVf,SAAmBC,GACf,OACI,yBAAKC,UAAY,aACjB,2BAAOC,KAAK,WAAWC,QAASH,EAAMI,QAAQN,YAC9C,2BAAIE,EAAMI,QAAQP,QCWXQ,MAXf,WAEE,IAAMC,EAAWX,EAAUY,KAAI,SAAAH,GAAO,OAAI,kBAAC,EAAD,CAAWI,IAAKJ,EAAQR,GAAIQ,QAASA,OAC/E,OACE,6BACI,0CACCE,ICAWG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICLCC,E,kDACL,aAAe,IAAD,8BACZ,gBAGFC,YAAc,WACZ,EAAKC,SAAS,CAACC,MAAO,UAHtB,EAAKC,MAAQ,CAACD,MAAO,SAFT,E,qDASZ,OACA,6BACA,iDAAuBE,KAAKD,MAAMD,MAAlC,SACE,iDAAuBE,KAAKnB,MAAMiB,MAAlC,SACA,4BAAQf,KAAK,SAASkB,QAASD,KAAKJ,aAApC,qB,GAdaM,IAAMC,WAoBnBC,E,kDACN,aAAc,IAAD,8BACX,gBAIFC,WAAa,WACX,EAAKR,SAAS,CAACC,MAAO,SACtBQ,MAAM,2BALN,EAAKP,MAAO,CAACD,MAAM,UAFR,E,qDAUT,OACE,6BACE,8CACA,kBAAC,EAAD,CAAKA,MAAM,QACX,uDAA6BE,KAAKD,MAAMD,MAAxC,UACA,4BAAQf,KAAK,SAASkB,QAASD,KAAKK,YAApC,sBAEA,kBAAC,EAAD,W,GAlBYH,IAAMC,WAyBzBI,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SDyE9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.80f2a15b.chunk.js","sourcesContent":["const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Mow lawn\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React from 'react'\r\n\r\nfunction TodoItems(props){\r\n    return(\r\n        <div className = \"todo-item\">\r\n        <input type=\"checkbox\" checked={props.myItems.completed}/>\r\n        <p>{props.myItems.text}</p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TodoItems","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport todosData from './todosData'\nimport TodoItems from './TodoItems'\n\nfunction App() {\n  \n  const TodoComp = todosData.map(myItems => <TodoItems key={myItems.id} myItems={myItems}/>)\n  return (\n    <div>\n        <h1>React test</h1> \n        {TodoComp}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n/*\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  */\n class Car extends React.Component {\n  constructor() {\n    super()\n    this.state = {color: \"white\"}\n  }\n  changeColor = () =>{\n    this.setState({color: \"blue\"})\n  }\n\n  render() {\n    return (\n    <div>\n    <h2>This state color: {this.state.color} Car!</h2>\n      <h2>This props color: {this.props.color} Car!</h2> \n      <button type=\"button\" onClick={this.changeColor}>Change color</button>\n      </div>\n      );\n  }\n}\n\nclass Model extends React.Component{\nconstructor(){\n  super()\n  this.state= {color:\"purple\"}\n}\n\nshiftColor = () =>{\n  this.setState({color: \"pink\"})\n  alert(\"color has been changed\")\n}\n  render(){\n    return(\n      <div>\n        <h1>Who own this ?</h1>\n        <Car color=\"red\"/>\n        <h2>This is in model color: {this.state.color} Model</h2>\n        <button type=\"button\" onClick={this.shiftColor}>Change color Model</button>\n\n        <App />\n      </div>\n    );\n  }\n}\n\n\n ReactDOM.render(<Model />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}