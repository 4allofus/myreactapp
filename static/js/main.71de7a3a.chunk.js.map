{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","displayMovie.js","SearchMovies.js","index.js"],"names":["module","exports","App","className","src","logo","alt","Boolean","window","location","hostname","match","DisplayMovie","displayMovie","poster_path","title","release_date","vote_average","overview","SearchMovies","useState","query","setQuery","movie","getMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","onSubmit","htmlFor","type","required","name","placeholder","value","onChange","currentTarget","filter","map","key","id","MainWindow","href","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,0NCa5BC,MARf,WACE,OACE,yBAAKC,UAAU,OACX,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,W,YCI7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCChBS,SAASC,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,aAElC,OACI,yBAAKV,UAAU,QACH,yBAAKA,UAAU,cACfC,IAAG,0DAAqDS,EAAaC,aACrER,IAAKO,EAAaE,MAAQ,YAC1B,yBAAKZ,UAAU,iBACX,wBAAIA,UAAU,eAAeU,EAAaE,OAC1C,2BAAG,gDAAsBF,EAAaG,eACtC,2BAAG,0CAAgBH,EAAaI,eAChC,uBAAGd,UAAU,cAAcU,EAAaK,YCkCjDC,MA5Cf,WAAuB,MAGOC,mBAAS,IAHhB,mBAGZC,EAHY,KAGLC,EAHK,OAKQF,mBAAS,IALjB,mBAKZG,EALY,KAKLC,EALK,KAObC,EAAY,uCAAE,WAAMC,GAAN,mBAAAC,EAAA,6DAChBD,EAAEE,iBADc,SAOVC,EAPU,kHAOuGR,EAPvG,wCAUMS,MAAMD,GAVZ,cAUNE,EAVM,gBAWOA,EAAIC,OAXX,OAWNC,EAXM,OAaZT,EAAUS,EAAKC,SAbH,4GAAF,sDAoBlB,OACI,oCACA,0BAAM/B,UAAU,OAAOgC,SAAUV,GAC7B,2BAAOtB,UAAU,QAAQiC,QAAQ,SAAjC,iBACA,2BAAOjC,UAAU,QAAQkC,KAAK,OAAOC,SAAS,WAAWC,KAAK,QAAQC,YAAY,yBAClFC,MAAOpB,EAAOqB,SAAU,SAAChB,GAAD,OAAOJ,EAASI,EAAEiB,cAAcF,UACxD,4BAAQtC,UAAU,SAASkC,KAAK,UAAhC,WAEJ,yBAAKlC,UAAU,gBACVoB,EAAMqB,QAAO,SAAA/B,GAAY,OAAIA,EAAaC,eAAa+B,KAAI,SAAAhC,GAAY,OACpE,kBAACD,EAAD,CAAcC,aAAcA,EAAciC,IAAKjC,EAAakC,WC9BtEC,E,uKAEF,OACI,6BACI,6BAAS7C,UAAU,sBACrB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,WAGf,yBAAKA,UAAU,gCACb,4CAAiB,4BAAQA,UAAU,kBAAlB,SAAjB,QAAuE,4BAAQA,UAAU,kBAAlB,YAI3E,4BAAQA,UAAU,aAChB,yBAAKA,UAAU,wDACb,wBAAIA,UAAU,gCAAd,sBACA,wBAAIA,UAAU,6BAAd,cAAqD,uBAAG8C,KAAK,0BAAR,qBAIzD,6BAAS9C,UAAU,WACjB,yBAAKA,UAAU,YAAY4C,GAAG,QAC5B,kBAAC,EAAD,e,GA3BSG,IAAMC,WA+C/BC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SH0ElD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71de7a3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//import './App.sass';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nexport default function DisplayMovie({displayMovie}) {\r\n\r\n    return(\r\n        <div className=\"card\">\r\n                    <img className=\"card--image\"\r\n                    src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${displayMovie.poster_path}`}\r\n                    alt={displayMovie.title + ' poster' }/>\r\n                    <div className=\"card--content\">\r\n                        <h3 className=\"card--title\">{displayMovie.title}</h3>\r\n                        <p><small>RELEASE DATE: {displayMovie.release_date}</small></p>\r\n                        <p><small>RATING: {displayMovie.vote_average}</small></p>\r\n                        <p className=\"card--desc\">{displayMovie.overview}</p>\r\n                    </div>\r\n                </div>\r\n    )\r\n\r\n}","import React, {useState} from 'react'\r\nimport DisplayMovie from './displayMovie'\r\n\r\nfunction SearchMovies(){\r\n\r\n    //states - input query, movies\r\n    const [query, setQuery] = useState('')\r\n    //states - output movie, movies\r\n    const [movie, getMovies] = useState([])\r\n\r\n    const searchMovies =async(e) => {\r\n        e.preventDefault()\r\n        //alert(\"submit!!\")\r\n    \r\n        //const query = \"step up\";\r\n        \r\n        try{\r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=1c963e0bb9546bfc655cd410aca57872&language=en-US&query=${query}&page=1&include_adult=false`;\r\n\r\n        //const url = `https://api.themoviedb.org/3/movie/550?api_key=1c963e0bb9546bfc655cd410aca57872`\r\n            const res = await fetch(url)\r\n            const data = await res.json()\r\n            //console.log(data.results)\r\n            getMovies(data.results)\r\n        }\r\n        catch(err){\r\n            //alert(err)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <form className=\"form\" onSubmit={searchMovies}>\r\n            <label className=\"label\" htmlFor=\"query\">Movie name : </label>\r\n            <input className=\"input\" type=\"text\" required=\"required\" name=\"query\" placeholder=\"Enter movie name, here\"\r\n            value={query} onChange={(e) => setQuery(e.currentTarget.value)}/>\r\n            <button className=\"button\" type=\"submit\">search</button>\r\n        </form>\r\n        <div className=\"display-list\">\r\n            {movie.filter(displayMovie => displayMovie.poster_path).map(displayMovie => (\r\n                <DisplayMovie displayMovie={displayMovie} key={displayMovie.id} />\r\n            ))}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchMovies","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js'\nimport './index.css';\n//import './debug.css';\nimport './helper.css';\nimport * as serviceWorker from './serviceWorker';\nimport SearchMovies from './SearchMovies'\n\n\nclass MainWindow extends React.Component {\n  render() {\n    return (\n        <div>\n            <section className=\"hero is-fullheight\">\n          <div className=\"hero-head\">\n            <div className=\"columns is-mobile is-marginless\">\n              <div className=\"column\">\n                <App />\n              </div>\n              <div className=\"column\">\n\n              </div>\n              <div className=\"column center has-text-white\">\n                <p>Dibuat dengan <strong className=\"has-text-white\">REACT</strong> dan <strong className=\"has-text-white\">Bulma</strong></p>\n              </div>\n            </div>\n\n            <header className=\"hero-body\">\n              <div className=\"container is-overlay has-text-centered single-spaced\" >\n                <h1 className=\"subtitle is-2 has-text-white\">React Movie Search</h1>\n                <h2 className=\"title is-3 has-text-white\">Powered by <a href=\"https://themoviedb.org\">themoviedb.org</a></h2>\n              </div>\n            </header>\n\n            <section className=\"section\">\n              <div className=\"container\" id=\"root\">\n                <SearchMovies />\n\n              </div>\n            </section>\n\n</div>\n</section>\n        </div>\n    );\n  }\n}\n\n/*\nReactDOM.render(\n    <App />\n,\n  document.getElementById('logo')\n);\n*/\n\nReactDOM.render(<MainWindow />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}